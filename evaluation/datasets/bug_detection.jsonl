{"input": "diff --git a/user_service.py b/user_service.py\nindex 1234567..abcdefg 100644\n--- a/user_service.py\n+++ b/user_service.py\n@@ -10,7 +10,8 @@ def get_user_profile(user_id):\n     user = User.objects.get(id=user_id)\n-    return {\"name\": user.name, \"email\": user.email}\n+    # New feature: include profile picture\n+    return {\"name\": user.name, \"email\": user.email, \"avatar\": user.profile.avatar_url}", "target": {"expected_issues": [{"type": "bug", "line": 13, "description": "Potential AttributeError if user.profile is None", "severity": "high", "suggestion": "Add null check: user.profile.avatar_url if user.profile else None"}], "expected_feedback": [], "is_clean_code": false}, "metadata": {"category": "synthetic", "complexity": "medium", "language": "python"}}
{"input": "diff --git a/search.py b/search.py\nindex 1234567..abcdefg 100644\n--- a/search.py\n+++ b/search.py\n@@ -15,7 +15,8 @@ def search_users(query):\n-    users = User.objects.filter(name__icontains=query)\n+    # Switch to raw SQL for better performance\n+    users = User.objects.raw(f\"SELECT * FROM users WHERE name LIKE '%{query}%'\")", "target": {"expected_issues": [{"type": "security", "line": 18, "description": "SQL injection vulnerability in raw query", "severity": "critical", "suggestion": "Use parameterized queries or stick with ORM filtering"}], "expected_feedback": [], "is_clean_code": false}, "metadata": {"category": "synthetic", "complexity": "medium", "language": "python"}}
{"input": "diff --git a/blog.py b/blog.py\nindex 1234567..abcdefg 100644\n--- a/blog.py\n+++ b/blog.py\n@@ -20,6 +20,9 @@ def get_blog_posts():\n     posts = BlogPost.objects.all()\n     result = []\n     for post in posts:\n+        # Add author info to each post\n+        author = User.objects.get(id=post.author_id)\n+        post.author_name = author.name\n         result.append(post)", "target": {"expected_issues": [{"type": "performance", "line": 24, "description": "N+1 query problem - fetching author for each post separately", "severity": "medium", "suggestion": "Use select_related: BlogPost.objects.select_related('author').all()"}], "expected_feedback": [], "is_clean_code": false}, "metadata": {"category": "synthetic", "complexity": "medium", "language": "python"}}
